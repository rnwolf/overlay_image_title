{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overlay Image Title Overlay image, top, bottom, left or right, with a title. For more info visit https://github.com/rnwolf/overlay_image_title/. Usage $ imagetitle [OPTIONS] Options : -i, --input PATH : Image file name. [default: input.png] -o, --output PATH : Output file name. [default: output.png] -p, --position [bottom|top|left|right] : Where to position the tile. [default: bottom] -t, --title TEXT : Text for title. -f, --font TEXT : Font name or path. -r, --fraction FLOAT RANGE : What fraction, 0 to 1, of the image edge should be covered by the title? [default: 0.75] --version --install-completion : Install completion for the current shell. --show-completion : Show completion for the current shell, to copy it or customize the installation. --help : Show this message and exit. Project layout C:\\Users\\workspace\\overlay_image_title \u251c\u2500\u2500 changes | \u251c\u2500\u2500 bugfix | \u251c\u2500\u2500 doc | \u251c\u2500\u2500 feature | \u251c\u2500\u2500 misc | \u2514\u2500\u2500 removal \u251c\u2500\u2500 conftest.py \u251c\u2500\u2500 dev-dependencies.in \u251c\u2500\u2500 dev-dependencies.txt \u251c\u2500\u2500 dist | \u251c\u2500\u2500 imagetitle-0.0.0-py3-none-any.whl | \u2514\u2500\u2500 imagetitle-0.0.0.tar.gz \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 docs | \u251c\u2500\u2500 changelog.md | \u251c\u2500\u2500 development.md | \u251c\u2500\u2500 help.md | \u251c\u2500\u2500 index.md | \u2514\u2500\u2500 Installation.md \u251c\u2500\u2500 imagetitle.egg-info | \u251c\u2500\u2500 dependency_links.txt | \u251c\u2500\u2500 entry_points.txt | \u251c\u2500\u2500 PKG-INFO | \u251c\u2500\u2500 requires.txt | \u251c\u2500\u2500 SOURCES.txt | \u2514\u2500\u2500 top_level.txt \u251c\u2500\u2500 input copy.png \u251c\u2500\u2500 input.png \u251c\u2500\u2500 installed-packages.txt \u251c\u2500\u2500 list-key-dev-packages.py \u251c\u2500\u2500 make-linux-release.sh \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 mypy.ini \u251c\u2500\u2500 out.png \u251c\u2500\u2500 output.jpg \u251c\u2500\u2500 poetry.lock \u251c\u2500\u2500 public | \u251c\u2500\u2500 404.html | \u251c\u2500\u2500 changelog | | \u2514\u2500\u2500 index.html | \u251c\u2500\u2500 css | | \u251c\u2500\u2500 base.css | | \u251c\u2500\u2500 bootstrap.min.css | | \u2514\u2500\u2500 font-awesome.min.css | \u251c\u2500\u2500 development | | \u2514\u2500\u2500 index.html | \u251c\u2500\u2500 fonts | | \u251c\u2500\u2500 fontawesome-webfont.eot | | \u251c\u2500\u2500 fontawesome-webfont.svg | | \u251c\u2500\u2500 fontawesome-webfont.ttf | | \u251c\u2500\u2500 fontawesome-webfont.woff | | \u251c\u2500\u2500 fontawesome-webfont.woff2 | | \u251c\u2500\u2500 glyphicons-halflings-regular.eot | | \u251c\u2500\u2500 glyphicons-halflings-regular.svg | | \u251c\u2500\u2500 glyphicons-halflings-regular.ttf | | \u251c\u2500\u2500 glyphicons-halflings-regular.woff | | \u2514\u2500\u2500 glyphicons-halflings-regular.woff2 | \u251c\u2500\u2500 help | | \u2514\u2500\u2500 index.html | \u251c\u2500\u2500 img | | \u251c\u2500\u2500 favicon.ico | | \u2514\u2500\u2500 grid.png | \u251c\u2500\u2500 index.html | \u251c\u2500\u2500 Installation | | \u2514\u2500\u2500 index.html | \u251c\u2500\u2500 js | | \u251c\u2500\u2500 base.js | | \u251c\u2500\u2500 bootstrap.min.js | | \u2514\u2500\u2500 jquery-1.10.2.min.js | \u251c\u2500\u2500 search | | \u251c\u2500\u2500 lunr.js | | \u251c\u2500\u2500 main.js | | \u251c\u2500\u2500 search_index.json | | \u2514\u2500\u2500 worker.js | \u251c\u2500\u2500 sitemap.xml | \u2514\u2500\u2500 sitemap.xml.gz \u251c\u2500\u2500 pyproject.toml \u251c\u2500\u2500 pytest.ini \u251c\u2500\u2500 readme-sample-output.png \u251c\u2500\u2500 README.md \u251c\u2500\u2500 src | \u251c\u2500\u2500 imagetitle | | \u251c\u2500\u2500 imagetitle.py | | \u251c\u2500\u2500 __init__.py | | \u251c\u2500\u2500 __main__.py | | \u2514\u2500\u2500 __pycache__ | \u2514\u2500\u2500 imagetitle.egg-info | \u251c\u2500\u2500 dependency_links.txt | \u251c\u2500\u2500 entry_points.txt | \u251c\u2500\u2500 PKG-INFO | \u251c\u2500\u2500 requires.txt | \u251c\u2500\u2500 SOURCES.txt | \u2514\u2500\u2500 top_level.txt \u251c\u2500\u2500 tests | \u251c\u2500\u2500 baseline_images | | \u251c\u2500\u2500 test_app_position_bottom_Windows.png | | \u251c\u2500\u2500 test_app_position_left_Windows.png | | \u251c\u2500\u2500 test_app_position_right_Windows.png | | \u2514\u2500\u2500 test_app_position_top_Windows.png | \u251c\u2500\u2500 input.png | \u251c\u2500\u2500 test_icon_image.ico | \u251c\u2500\u2500 test_imagetitle.py | \u251c\u2500\u2500 __init__.py | \u2514\u2500\u2500 __pycache__ \u251c\u2500\u2500 Ubuntu-C.ttf \u251c\u2500\u2500 vale | \u2514\u2500\u2500 styles | \u251c\u2500\u2500 demo | \u251c\u2500\u2500 Google | \u251c\u2500\u2500 Joblint | \u251c\u2500\u2500 plugins | \u251c\u2500\u2500 proselint | \u251c\u2500\u2500 Spelling | \u251c\u2500\u2500 vale | \u2514\u2500\u2500 write-good \u2514\u2500\u2500 __pycache__","title":"Overlay Image Title"},{"location":"#overlay_image_title","text":"Overlay image, top, bottom, left or right, with a title. For more info visit https://github.com/rnwolf/overlay_image_title/.","title":"Overlay Image Title"},{"location":"#usage","text":"$ imagetitle [OPTIONS] Options : -i, --input PATH : Image file name. [default: input.png] -o, --output PATH : Output file name. [default: output.png] -p, --position [bottom|top|left|right] : Where to position the tile. [default: bottom] -t, --title TEXT : Text for title. -f, --font TEXT : Font name or path. -r, --fraction FLOAT RANGE : What fraction, 0 to 1, of the image edge should be covered by the title? [default: 0.75] --version --install-completion : Install completion for the current shell. --show-completion : Show completion for the current shell, to copy it or customize the installation. --help : Show this message and exit.","title":"Usage"},{"location":"#project_layout","text":"C:\\Users\\workspace\\overlay_image_title \u251c\u2500\u2500 changes | \u251c\u2500\u2500 bugfix | \u251c\u2500\u2500 doc | \u251c\u2500\u2500 feature | \u251c\u2500\u2500 misc | \u2514\u2500\u2500 removal \u251c\u2500\u2500 conftest.py \u251c\u2500\u2500 dev-dependencies.in \u251c\u2500\u2500 dev-dependencies.txt \u251c\u2500\u2500 dist | \u251c\u2500\u2500 imagetitle-0.0.0-py3-none-any.whl | \u2514\u2500\u2500 imagetitle-0.0.0.tar.gz \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 docs | \u251c\u2500\u2500 changelog.md | \u251c\u2500\u2500 development.md | \u251c\u2500\u2500 help.md | \u251c\u2500\u2500 index.md | \u2514\u2500\u2500 Installation.md \u251c\u2500\u2500 imagetitle.egg-info | \u251c\u2500\u2500 dependency_links.txt | \u251c\u2500\u2500 entry_points.txt | \u251c\u2500\u2500 PKG-INFO | \u251c\u2500\u2500 requires.txt | \u251c\u2500\u2500 SOURCES.txt | \u2514\u2500\u2500 top_level.txt \u251c\u2500\u2500 input copy.png \u251c\u2500\u2500 input.png \u251c\u2500\u2500 installed-packages.txt \u251c\u2500\u2500 list-key-dev-packages.py \u251c\u2500\u2500 make-linux-release.sh \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 mypy.ini \u251c\u2500\u2500 out.png \u251c\u2500\u2500 output.jpg \u251c\u2500\u2500 poetry.lock \u251c\u2500\u2500 public | \u251c\u2500\u2500 404.html | \u251c\u2500\u2500 changelog | | \u2514\u2500\u2500 index.html | \u251c\u2500\u2500 css | | \u251c\u2500\u2500 base.css | | \u251c\u2500\u2500 bootstrap.min.css | | \u2514\u2500\u2500 font-awesome.min.css | \u251c\u2500\u2500 development | | \u2514\u2500\u2500 index.html | \u251c\u2500\u2500 fonts | | \u251c\u2500\u2500 fontawesome-webfont.eot | | \u251c\u2500\u2500 fontawesome-webfont.svg | | \u251c\u2500\u2500 fontawesome-webfont.ttf | | \u251c\u2500\u2500 fontawesome-webfont.woff | | \u251c\u2500\u2500 fontawesome-webfont.woff2 | | \u251c\u2500\u2500 glyphicons-halflings-regular.eot | | \u251c\u2500\u2500 glyphicons-halflings-regular.svg | | \u251c\u2500\u2500 glyphicons-halflings-regular.ttf | | \u251c\u2500\u2500 glyphicons-halflings-regular.woff | | \u2514\u2500\u2500 glyphicons-halflings-regular.woff2 | \u251c\u2500\u2500 help | | \u2514\u2500\u2500 index.html | \u251c\u2500\u2500 img | | \u251c\u2500\u2500 favicon.ico | | \u2514\u2500\u2500 grid.png | \u251c\u2500\u2500 index.html | \u251c\u2500\u2500 Installation | | \u2514\u2500\u2500 index.html | \u251c\u2500\u2500 js | | \u251c\u2500\u2500 base.js | | \u251c\u2500\u2500 bootstrap.min.js | | \u2514\u2500\u2500 jquery-1.10.2.min.js | \u251c\u2500\u2500 search | | \u251c\u2500\u2500 lunr.js | | \u251c\u2500\u2500 main.js | | \u251c\u2500\u2500 search_index.json | | \u2514\u2500\u2500 worker.js | \u251c\u2500\u2500 sitemap.xml | \u2514\u2500\u2500 sitemap.xml.gz \u251c\u2500\u2500 pyproject.toml \u251c\u2500\u2500 pytest.ini \u251c\u2500\u2500 readme-sample-output.png \u251c\u2500\u2500 README.md \u251c\u2500\u2500 src | \u251c\u2500\u2500 imagetitle | | \u251c\u2500\u2500 imagetitle.py | | \u251c\u2500\u2500 __init__.py | | \u251c\u2500\u2500 __main__.py | | \u2514\u2500\u2500 __pycache__ | \u2514\u2500\u2500 imagetitle.egg-info | \u251c\u2500\u2500 dependency_links.txt | \u251c\u2500\u2500 entry_points.txt | \u251c\u2500\u2500 PKG-INFO | \u251c\u2500\u2500 requires.txt | \u251c\u2500\u2500 SOURCES.txt | \u2514\u2500\u2500 top_level.txt \u251c\u2500\u2500 tests | \u251c\u2500\u2500 baseline_images | | \u251c\u2500\u2500 test_app_position_bottom_Windows.png | | \u251c\u2500\u2500 test_app_position_left_Windows.png | | \u251c\u2500\u2500 test_app_position_right_Windows.png | | \u2514\u2500\u2500 test_app_position_top_Windows.png | \u251c\u2500\u2500 input.png | \u251c\u2500\u2500 test_icon_image.ico | \u251c\u2500\u2500 test_imagetitle.py | \u251c\u2500\u2500 __init__.py | \u2514\u2500\u2500 __pycache__ \u251c\u2500\u2500 Ubuntu-C.ttf \u251c\u2500\u2500 vale | \u2514\u2500\u2500 styles | \u251c\u2500\u2500 demo | \u251c\u2500\u2500 Google | \u251c\u2500\u2500 Joblint | \u251c\u2500\u2500 plugins | \u251c\u2500\u2500 proselint | \u251c\u2500\u2500 Spelling | \u251c\u2500\u2500 vale | \u2514\u2500\u2500 write-good \u2514\u2500\u2500 __pycache__","title":"Project layout"},{"location":"Installation/","text":"Installation There are a number of ways you could install this utility. Python If you are familiar with the installation of python packages in a virtual environment then you can install with: pip install imagetitle This will give you a command line application that you can use at the terminal. Pipx Another approach is to use a utility called Pipx to install the application. pipx install imagetitle or pipx install git+https://github.com/rnwolf/overlay_image_title/ Docker The utility is also packaged up in a Docker image . If you have docker installed then you can pull down the application and python all in one image. docker pull rnwolf/overlayimagetitle To show application help docker run -t -i --rm -v ${PWD}:/app overlayimagetitle:latest Show version docker run -t -i --rm -v ${PWD}:/app overlayimagetitle:latest --version Given a file called input.png in current working dir then with this produce output.png in docker run -t -i --rm -v ${PWD}:/app overlayimagetitle:latest -i /app/input.png -f /fnt/Ubuntu-C.ttf Open a bash shell inside of the docker container docker run -t -i --rm --entrypoint /bin/bash -v ${PWD}:/app overlayimagetitle:latest Setup alias for Docker Image When using docker to run command setup a command alias for imagetitle In your powershell profile add the following function imagetitle { docker run -it --rm v ${pwd}:/app overlayimagetitle:latest $args } Or if you use bash terminal then update .bashrc profilr by adding: alias imagetitle='docker run -it --rm -v \\`pwd\\`:/app overlayimagetitle:latest'","title":"Installation"},{"location":"Installation/#installation","text":"There are a number of ways you could install this utility.","title":"Installation"},{"location":"Installation/#python","text":"If you are familiar with the installation of python packages in a virtual environment then you can install with: pip install imagetitle This will give you a command line application that you can use at the terminal.","title":"Python"},{"location":"Installation/#pipx","text":"Another approach is to use a utility called Pipx to install the application. pipx install imagetitle or pipx install git+https://github.com/rnwolf/overlay_image_title/","title":"Pipx"},{"location":"Installation/#docker","text":"The utility is also packaged up in a Docker image . If you have docker installed then you can pull down the application and python all in one image. docker pull rnwolf/overlayimagetitle To show application help docker run -t -i --rm -v ${PWD}:/app overlayimagetitle:latest Show version docker run -t -i --rm -v ${PWD}:/app overlayimagetitle:latest --version Given a file called input.png in current working dir then with this produce output.png in docker run -t -i --rm -v ${PWD}:/app overlayimagetitle:latest -i /app/input.png -f /fnt/Ubuntu-C.ttf Open a bash shell inside of the docker container docker run -t -i --rm --entrypoint /bin/bash -v ${PWD}:/app overlayimagetitle:latest","title":"Docker"},{"location":"Installation/#setup_alias_for_docker_image","text":"When using docker to run command setup a command alias for imagetitle In your powershell profile add the following function imagetitle { docker run -it --rm v ${pwd}:/app overlayimagetitle:latest $args } Or if you use bash terminal then update .bashrc profilr by adding: alias imagetitle='docker run -it --rm -v \\`pwd\\`:/app overlayimagetitle:latest'","title":"Setup alias for Docker Image"},{"location":"changelog/","text":"Changelog Overlay Image Title 0.0.0 (2020-06-11) First release.","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#overlay_image_title_000_2020-06-11","text":"First release.","title":"Overlay Image Title 0.0.0 (2020-06-11)"},{"location":"development/","text":"Development This package was created with Cookiecutter and the rnwolf/py-cookiecutter project template. This template should make it easier to develop python command line applications. These applications are based on the Typer library. They are packaged up using Poetry Testing of the app is done via PyTest . The the application modifies images a Pytest fixture as discussed here is used to test that the application is not accidentlally broken during development. As this is a new CLI application I am going for 100% testing coverage : pytest --cov=imagetitle tests/ Tips for Win 10 environment If using Windows PowerShell terminal consider installing Set-PsEnv.psm1. And then updating the virtualenv activate script because VSCode does not yet automatically load .env valiables in the Terminal, although they are loaded by the Python process. https://github.com/microsoft/vscode-python/issues/944#issuecomment-458774142 Get-ChildItem Env: To list environment vars in shell. I am not using Pylint in VSCode it seems to raise some false errors. Fonts Tips for MacOS The imagetitle application uses an \"Ubuntu Condensed\" font. The following should enable you to install the font, at the terminal on MacOS. cd ~/Library/Fonts && { curl -O 'https://meganerd.keybase.pub/ubuntu-font-family-0.83/Ubuntu-C.ttf' ; cd -; } Development Process Overview Install the Github CLI tool gh . https://github.com/cli/cli Install the PlantUML utility to ensure that diagrams embeded in docs can be generated. Check instalation instructions. On windows use choco install plantuml or scoop install plantuml Install Vale, a writing style linter and the 'Google Writing Style Rules' https://errata-ai.gitbook.io/vale/getting-started/installation Get the release and place executable into file on the path such as C:\\Users\\rnwol.local\\bin Make sure you have the lastest Google Writting Style Rules Install pipx if not installed python3 -m pip install pipx python3 -m pipx ensurepath Install cookiecutter pipx install cookiecutter Install virtualenv to make setting up environments MUCH faster ```pipx install virtualenv virtualenv --help Install poetry, package dependency management tool ```pipx install poetry``` Make sure to configure poetry to save virtualenv to a local .venv location, so that it can be found by VSCode and PyCharm. ```poetry config --local virtualenvs.in-project true``` Use cookiecutter to create project from this template ```pipx run cookiecutter gh:rnwolf/py-package-cookiecutter``` Answer cookiecutter qustions. Enter Package directory ```cd overlay_image_title``` Initialise git repo ```git init``` Ensure that make-linux-release.sh file is executable. On MS-Windows use : ```git add --chmod=+x -- make-linux-release.sh``` On Linux : ```chmod +x make-linux-release.s``` Add and commit files. git add --all git commit -m \"First commit\" Create a repository for the current directory with GitHub GH cli utility. ```gh repo create --public``` Connect up local and remote repo. -u = upstream ```git push -u origin master``` Create virtualenv (Have some problems doing this with poetry) ```py -3.8 -m venv .venv``` #Windows or ```python3.8 -m venv .venv``` or use https://virtualenv.pypa.io/en/latest/ ```virtualenv -p 3.8 .venv``` Install all dependencies specified in pyproject.toml ```poetry install``` Setup pre-commit and pre-push hooks poetry run pre-commit install -t pre-commit poetry run pre-commit install -t pre-push Launch IDE, like VSCode Ctrl+Shift P -> Select Interperter, Testing, Linting etc. Specify what the next version is that will be worked on. bump current version with, bump rule: - patch, minor, major, prepatch, preminor, premajor, prerelease. For example: ```poetry version patch``` Create a GitHub Issue and document what the intention of the planned change is. ```gh issue create``` Make a note of the issue number, to be used with the change note. Make a end user focused note of the change in the folder. ```.\\changes\\feature\\issue.<issue number>.md``` Add tests in the .\\tests folder. Make sure you use the utilities installed to ensure quality. ```pytest # Run all automated tests pytest --cov=imagetitle tests # Look for 100% coverage Pin point which parts of the code are NOT covered by a test. pytest --cov-report term-missing:skip-covered --cov=imagetitle .\\tests\\ Auto format code and tests black tests black imagetitle flake8 # All sorts of guidance interrogate # Docstring check safety check # Check dependent packages for security adviories pre-commit run --all-files # Run all the CI lint tests, including black for auomatic layout vale .\\docs # Check the quality of your documentation Run and test your application in the following ways: imagetitle --help python -m imagetitle --help pytest Update DOCUMENTAION before you build the package. To preview documentation change summary use: proclamation build YOUR_NEW_VERSION_NUMBER To overwrite your changelog file with the updated one and delete the used changelog fragments. proclamation build YOUR_NEW_VERSION_NUMBER --delete-fragments --overwrite Update DOCUMENTAION before you build the package. Use Typer superpowers to build documentation based on DocStrings and Typer configuration typer imagetitle.imagetitle utils docs --name imagetitle --output docs/autodoc.md Check that the documentation is good. mkdocs build or mkdocs serve commands to build and review the documentation. Add the changed files git add git commit -m \"My comment\" If you have several commits to squash together do the following. git log git rebase --interactive [commit-hash] mark all the commits as squashable, except the first/older one mark a commit as squashable by changing the work pick into squash next to it (or s for brevity) Use Typer to generate the documentation for the Readme files. typer .\\src\\imagetitle\\imagetitle.py utils docs --name imagetitle --output ./docs/help.md Copy the output of help.md into the README.MD and index.md files. OPTIONAL Publish the documentation to the GH-Pages at http(s)://<github_user>.github.io/<repository_name> Note: It takes a few minutes for the pages to apprear. https://rnwolf.github.io/imagetitle/ mkdocs gh-deploy # Subsequent commits to repo will automatically publish gh-pages with action workflow. Commit tested code and reviewed documentation. git commit -m \"What was added?\" git push To create local build of the package add a VERSION_NUMBER as a semver tag. Based on version value in pyproject.toml Check with: grep ^version pyproject.toml git tag v0.0.1 git push --tags # Tags have to be explicitly pused to the remote origin git repo. Remove the previous build artefacts rm -rf dist build or PS> Remove-Items -force -r dist poetry build # Build release package Add the TestPyPI repository to Poetry. The default location is to the real PyPI. poetry config repositories.test-pypi https://test.pypi.org/legacy/ Publish, enter username and password Better to use tokens for a specific package if you can. https://pypi.org/help/#apitoken poetry publish -r test-pypi Add PyPI repo to Poetry, with the use of a token, rather than password. poetry config pypi-token.pypi my-token Or TEST release process to a LOCAL PRIVATE Devlopment PyPi instance. Reference: https://github.com/python-poetry/poetry/issues/726#issuecomment-598392820 https://stefan.sofa-rockers.org/2017/11/09/getting-started-with-devpi/ Setup a local Development PyPi to test the upload of releases with poetry NOTE CANNOT Use Python 3.8. Works with Python 3.7. If installing on a clean Ubuntu server then apt-get -y update apt-get install -y python3-venv libssl-dev libffi-dev python3-dev build-essential Create working directory cd ~ cd workspace # or similar WIP directory mkdir mypypi Create Virtualenv python3.7 -m venv .venv ./.venv/bin/python -m pip install pip --upgrade source ./.venv/bin/activate pip install devpi-web devpi-client devpi-init devpi-gen-config apt install -y supervisor supervisord -c gen-config/supervisord.conf devpi use http://localhost:3141 devpi login root #root password is blank! Create a \"packages\" user & index. devpi user -c packages email=packaging@company.com password=packages devpi index -c packages/stable bases=root/pypi volatile=False Add information about the DevPyPi server/service poetry config repositories.stable http://localhost:3141/packages/stable poetry publish -r stable -u ${username} -p {password} poetry publish -r stable -u packages -p packages Check index in your browser http://localhost:3141/packages/stable FINALY Download the CI package artefacts wheel and tar file, to local folder called ./dist Edit the release info in github and upload the release package artefacts. poetry publish # To publish packages aretefacts to PyPi Docker Image Build Image with docker build --pull --rm -f \"Dockerfile\" -t overlayimagetitle:latest \".\" Run the code in the Docker image with: In Windows Powershell with (The volumn mapping to PWD directory varies depending on OS.) docker run -t -i --rm -v ${PWD}:/usr/app overlayimagetitle:latest -i /usr/app/input.png -o /usr/app/out.png --font=\"/fnt/Ubuntu-C.ttf\" In order to get inside the Docker image use the following: docker run -t -i --rm -v ${PWD}:/app overlayimagetitle:latest CHANGELOG / NEWS entries The docs/changelog.md file is managed using pronouncments and all non trivial changes must be accompanied by a news entry. To add an entry to the changelog.md file, first you need to have created a repo issue describing the change you want to make. A Pull Request itself may function as such, but it is preferred to have a dedicated issue (for example, in case the PR ends up rejected due to code quality reasons). Once you have an issue or pull request, you take the number and you create a file inside of the changes directory. Thus if your issue or PR number is 1234 and this change is fixing a bug, then you would create a file docs/changelog/bugfix/1234.md . PRs can span multiple categories by creating multiple files (for instance, if you added a feature and deprecated/removed the old feature at the same time, you would create docs/changelog/bugfix/1234.md and docs/changelog/remove/1234.md). Likewise if a PR touches multiple issues/PRs you may create a file for each of them with the same contents and pronouncment will deduplicate them. Contents of a NEWS entry The contents of this file are markdown formatted text that will be used as the content of the news file entry. You do not need to reference the issue or PR numbers here as pronouncement will automatically add a reference to all of the affected issues when rendering the news file. In order to maintain a consistent style in the CHANGELOG.md file, it is preferred to keep the news entry to the point, in sentence case, shorter than 120 characters and in an imperative tone \u2013 an entry should complete the sentence This change will \u2026. In rare cases, where one line is not enough, use a summary line in an imperative tone followed by a blank line separating it from a description of the feature/change in one or more paragraphs, each wrapped at 120 characters. Remember that a news entry is meant for end users and should only contain details relevant to an end user.","title":"Development"},{"location":"development/#development","text":"This package was created with Cookiecutter and the rnwolf/py-cookiecutter project template. This template should make it easier to develop python command line applications. These applications are based on the Typer library. They are packaged up using Poetry Testing of the app is done via PyTest . The the application modifies images a Pytest fixture as discussed here is used to test that the application is not accidentlally broken during development. As this is a new CLI application I am going for 100% testing coverage : pytest --cov=imagetitle tests/","title":"Development"},{"location":"development/#tips_for_win_10_environment","text":"If using Windows PowerShell terminal consider installing Set-PsEnv.psm1. And then updating the virtualenv activate script because VSCode does not yet automatically load .env valiables in the Terminal, although they are loaded by the Python process. https://github.com/microsoft/vscode-python/issues/944#issuecomment-458774142 Get-ChildItem Env: To list environment vars in shell. I am not using Pylint in VSCode it seems to raise some false errors.","title":"Tips for Win 10 environment"},{"location":"development/#fonts","text":"","title":"Fonts"},{"location":"development/#tips_for_macos","text":"The imagetitle application uses an \"Ubuntu Condensed\" font. The following should enable you to install the font, at the terminal on MacOS. cd ~/Library/Fonts && { curl -O 'https://meganerd.keybase.pub/ubuntu-font-family-0.83/Ubuntu-C.ttf' ; cd -; }","title":"Tips for MacOS"},{"location":"development/#development_process_overview","text":"Install the Github CLI tool gh . https://github.com/cli/cli Install the PlantUML utility to ensure that diagrams embeded in docs can be generated. Check instalation instructions. On windows use choco install plantuml or scoop install plantuml Install Vale, a writing style linter and the 'Google Writing Style Rules' https://errata-ai.gitbook.io/vale/getting-started/installation Get the release and place executable into file on the path such as C:\\Users\\rnwol.local\\bin Make sure you have the lastest Google Writting Style Rules Install pipx if not installed python3 -m pip install pipx python3 -m pipx ensurepath Install cookiecutter pipx install cookiecutter Install virtualenv to make setting up environments MUCH faster ```pipx install virtualenv virtualenv --help Install poetry, package dependency management tool ```pipx install poetry``` Make sure to configure poetry to save virtualenv to a local .venv location, so that it can be found by VSCode and PyCharm. ```poetry config --local virtualenvs.in-project true``` Use cookiecutter to create project from this template ```pipx run cookiecutter gh:rnwolf/py-package-cookiecutter``` Answer cookiecutter qustions. Enter Package directory ```cd overlay_image_title``` Initialise git repo ```git init``` Ensure that make-linux-release.sh file is executable. On MS-Windows use : ```git add --chmod=+x -- make-linux-release.sh``` On Linux : ```chmod +x make-linux-release.s``` Add and commit files. git add --all git commit -m \"First commit\" Create a repository for the current directory with GitHub GH cli utility. ```gh repo create --public``` Connect up local and remote repo. -u = upstream ```git push -u origin master``` Create virtualenv (Have some problems doing this with poetry) ```py -3.8 -m venv .venv``` #Windows or ```python3.8 -m venv .venv``` or use https://virtualenv.pypa.io/en/latest/ ```virtualenv -p 3.8 .venv``` Install all dependencies specified in pyproject.toml ```poetry install``` Setup pre-commit and pre-push hooks poetry run pre-commit install -t pre-commit poetry run pre-commit install -t pre-push Launch IDE, like VSCode Ctrl+Shift P -> Select Interperter, Testing, Linting etc. Specify what the next version is that will be worked on. bump current version with, bump rule: - patch, minor, major, prepatch, preminor, premajor, prerelease. For example: ```poetry version patch``` Create a GitHub Issue and document what the intention of the planned change is. ```gh issue create``` Make a note of the issue number, to be used with the change note. Make a end user focused note of the change in the folder. ```.\\changes\\feature\\issue.<issue number>.md``` Add tests in the .\\tests folder. Make sure you use the utilities installed to ensure quality. ```pytest # Run all automated tests pytest --cov=imagetitle tests # Look for 100% coverage Pin point which parts of the code are NOT covered by a test. pytest --cov-report term-missing:skip-covered --cov=imagetitle .\\tests\\ Auto format code and tests black tests black imagetitle flake8 # All sorts of guidance interrogate # Docstring check safety check # Check dependent packages for security adviories pre-commit run --all-files # Run all the CI lint tests, including black for auomatic layout vale .\\docs # Check the quality of your documentation Run and test your application in the following ways: imagetitle --help python -m imagetitle --help pytest Update DOCUMENTAION before you build the package. To preview documentation change summary use: proclamation build YOUR_NEW_VERSION_NUMBER To overwrite your changelog file with the updated one and delete the used changelog fragments. proclamation build YOUR_NEW_VERSION_NUMBER --delete-fragments --overwrite Update DOCUMENTAION before you build the package. Use Typer superpowers to build documentation based on DocStrings and Typer configuration typer imagetitle.imagetitle utils docs --name imagetitle --output docs/autodoc.md Check that the documentation is good. mkdocs build or mkdocs serve commands to build and review the documentation. Add the changed files git add git commit -m \"My comment\" If you have several commits to squash together do the following. git log git rebase --interactive [commit-hash] mark all the commits as squashable, except the first/older one mark a commit as squashable by changing the work pick into squash next to it (or s for brevity) Use Typer to generate the documentation for the Readme files. typer .\\src\\imagetitle\\imagetitle.py utils docs --name imagetitle --output ./docs/help.md Copy the output of help.md into the README.MD and index.md files. OPTIONAL Publish the documentation to the GH-Pages at http(s)://<github_user>.github.io/<repository_name> Note: It takes a few minutes for the pages to apprear. https://rnwolf.github.io/imagetitle/ mkdocs gh-deploy # Subsequent commits to repo will automatically publish gh-pages with action workflow. Commit tested code and reviewed documentation. git commit -m \"What was added?\" git push To create local build of the package add a VERSION_NUMBER as a semver tag. Based on version value in pyproject.toml Check with: grep ^version pyproject.toml git tag v0.0.1 git push --tags # Tags have to be explicitly pused to the remote origin git repo. Remove the previous build artefacts rm -rf dist build or PS> Remove-Items -force -r dist poetry build # Build release package Add the TestPyPI repository to Poetry. The default location is to the real PyPI. poetry config repositories.test-pypi https://test.pypi.org/legacy/ Publish, enter username and password Better to use tokens for a specific package if you can. https://pypi.org/help/#apitoken poetry publish -r test-pypi Add PyPI repo to Poetry, with the use of a token, rather than password. poetry config pypi-token.pypi my-token Or TEST release process to a LOCAL PRIVATE Devlopment PyPi instance. Reference: https://github.com/python-poetry/poetry/issues/726#issuecomment-598392820 https://stefan.sofa-rockers.org/2017/11/09/getting-started-with-devpi/ Setup a local Development PyPi to test the upload of releases with poetry NOTE CANNOT Use Python 3.8. Works with Python 3.7. If installing on a clean Ubuntu server then apt-get -y update apt-get install -y python3-venv libssl-dev libffi-dev python3-dev build-essential Create working directory cd ~ cd workspace # or similar WIP directory mkdir mypypi Create Virtualenv python3.7 -m venv .venv ./.venv/bin/python -m pip install pip --upgrade source ./.venv/bin/activate pip install devpi-web devpi-client devpi-init devpi-gen-config apt install -y supervisor supervisord -c gen-config/supervisord.conf devpi use http://localhost:3141 devpi login root #root password is blank! Create a \"packages\" user & index. devpi user -c packages email=packaging@company.com password=packages devpi index -c packages/stable bases=root/pypi volatile=False Add information about the DevPyPi server/service poetry config repositories.stable http://localhost:3141/packages/stable poetry publish -r stable -u ${username} -p {password} poetry publish -r stable -u packages -p packages Check index in your browser http://localhost:3141/packages/stable FINALY Download the CI package artefacts wheel and tar file, to local folder called ./dist Edit the release info in github and upload the release package artefacts. poetry publish # To publish packages aretefacts to PyPi","title":"Development Process Overview"},{"location":"development/#docker_image","text":"Build Image with docker build --pull --rm -f \"Dockerfile\" -t overlayimagetitle:latest \".\" Run the code in the Docker image with: In Windows Powershell with (The volumn mapping to PWD directory varies depending on OS.) docker run -t -i --rm -v ${PWD}:/usr/app overlayimagetitle:latest -i /usr/app/input.png -o /usr/app/out.png --font=\"/fnt/Ubuntu-C.ttf\" In order to get inside the Docker image use the following: docker run -t -i --rm -v ${PWD}:/app overlayimagetitle:latest","title":"Docker Image"},{"location":"development/#changelog_news_entries","text":"The docs/changelog.md file is managed using pronouncments and all non trivial changes must be accompanied by a news entry. To add an entry to the changelog.md file, first you need to have created a repo issue describing the change you want to make. A Pull Request itself may function as such, but it is preferred to have a dedicated issue (for example, in case the PR ends up rejected due to code quality reasons). Once you have an issue or pull request, you take the number and you create a file inside of the changes directory. Thus if your issue or PR number is 1234 and this change is fixing a bug, then you would create a file docs/changelog/bugfix/1234.md . PRs can span multiple categories by creating multiple files (for instance, if you added a feature and deprecated/removed the old feature at the same time, you would create docs/changelog/bugfix/1234.md and docs/changelog/remove/1234.md). Likewise if a PR touches multiple issues/PRs you may create a file for each of them with the same contents and pronouncment will deduplicate them.","title":"CHANGELOG / NEWS entries"},{"location":"development/#contents_of_a_news_entry","text":"The contents of this file are markdown formatted text that will be used as the content of the news file entry. You do not need to reference the issue or PR numbers here as pronouncement will automatically add a reference to all of the affected issues when rendering the news file. In order to maintain a consistent style in the CHANGELOG.md file, it is preferred to keep the news entry to the point, in sentence case, shorter than 120 characters and in an imperative tone \u2013 an entry should complete the sentence This change will \u2026. In rare cases, where one line is not enough, use a summary line in an imperative tone followed by a blank line separating it from a description of the feature/change in one or more paragraphs, each wrapped at 120 characters. Remember that a news entry is meant for end users and should only contain details relevant to an end user.","title":"Contents of a NEWS entry"},{"location":"help/","text":"Help Overlay a title over the edge of the image. Usage : $ imagetitle [OPTIONS] Options : -i, --input PATH : Image file name. [default: input.png] -o, --output PATH : Output file name. [default: output.png] -p, --position [bottom|top|left|right] : Where to position the tile. [default: bottom] -t, --title TEXT : Text for title. -f, --font TEXT : Font name or path. -r, --fraction FLOAT RANGE : What fraction, 0 to 1, of the image edge should be covered by the title? [default: 0.75] --version --install-completion : Install completion for the current shell. --show-completion : Show completion for the current shell, to copy it or customize the installation. --help : Show this message and exit.","title":"Help"},{"location":"help/#help","text":"Overlay a title over the edge of the image. Usage : $ imagetitle [OPTIONS] Options : -i, --input PATH : Image file name. [default: input.png] -o, --output PATH : Output file name. [default: output.png] -p, --position [bottom|top|left|right] : Where to position the tile. [default: bottom] -t, --title TEXT : Text for title. -f, --font TEXT : Font name or path. -r, --fraction FLOAT RANGE : What fraction, 0 to 1, of the image edge should be covered by the title? [default: 0.75] --version --install-completion : Install completion for the current shell. --show-completion : Show completion for the current shell, to copy it or customize the installation. --help : Show this message and exit.","title":"Help"}]}